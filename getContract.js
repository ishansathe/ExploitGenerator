import fs from 'fs'

let contractCodeBuffer = fs.readFileSync('Smart Contracts/FuncCall.sol')

let contractName = 'PrivateFunctionExample';
let location;

console.log(contractCodeBuffer)


// I think we should include the location information in the output format itself!

console.log(location)
let lineCount = 1;
let start, end;

let stopper = false;

for (let i = 0; i<contractCodeBuffer.length; i++ ){
    if(
        contractCodeBuffer[i].toString(16) == 'd'
        && contractCodeBuffer[i+1].toString(16) == 'a'
    ){
        lineCount++;
    }

    if(!stopper && lineCount == location.start.line){
        start = i;
        stopper = true;
    }
    if(stopper && lineCount == location.end.line + 1) {
        // This is because the carriage returns '0d' and '0a' are not completely traversed when the line counter is updated.
        // We employ this logic in such a way that after the closing bracket, there is always a new line. (for contracts)
        // This is by convention.
        end = i;
        stopper = false;
        break;
    }
}
// console.log(start, end)
let extractedContractBuffer = contractCodeBuffer.subarray(start, end)

console.log(String(extractedContractBuffer))

let targetContract = String(extractedContractBuffer)


// console.log((contractCodeBuffer))


